<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <context id="DB2Tables" targetRuntime="MyBatis3">
        <commentGenerator>
            <property name="suppressDate" value="true"/>
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>
        <!--数据库链接地址账号密码-->
        <jdbcConnection driverClass="com.mysql.jdbc.Driver" connectionURL="jdbc:mysql://localhost:6603/boot?connectTimeout=48000" userId="root" password="root">
        </jdbcConnection>
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>
        <!--生成Model类存放位置-->
        <javaModelGenerator targetPackage="com.zs.goods.model" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>


        <!-- 生成SQL map的XML文件生成器，
         注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），
             或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置
         targetPackage/targetProject:同javaModelGenerator
        -->
        <sqlMapGenerator targetPackage="com.zs.goods.dao.mapper" targetProject="src/main/java">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>


        <!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口
      targetPackage/targetProject:同javaModelGenerator
      type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
          1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
          2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
          3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
      注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
  -->
        <javaClientGenerator targetPackage="com.zs.goods.dao" type="XMLMAPPER"
                             targetProject="src/main/java">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="false"/>
            <!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查
            <property name="rootInterface" value=""/>
             -->
        </javaClientGenerator>



        <!--生成对应表及类名-->
        <!--<table tableName="stocktradeinfo" domainObjectName="StockTradeInfo" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"></table>-->
        <!--<table tableName="sys_dept" domainObjectName="SysDept"    >-->
            <!--&lt;!&ndash;添加属性useActualColumnNames为true,那么生成的对象字段就跟表一样&ndash;&gt;-->
            <!--<property name="useActualColumnNames" value="true"/>-->
        <!--</table>-->
        <!--<table tableName="sys_menu" domainObjectName="SysMenu" >-->
            <!--<property name="useActualColumnNames" value="true"/>-->
        <!--</table>-->
        <!--<table tableName="sys_relation" domainObjectName="SysRelation" >-->
            <!--<property name="useActualColumnNames" value="true"/>-->
        <!--</table>-->
        <!--<table tableName="sys_role" domainObjectName="SysRole" >-->
            <!--<property name="useActualColumnNames" value="true"/>-->
        <!--</table>-->
        <!--<table tableName="sys_user" domainObjectName="SysUser" >-->
            <!--<property name="useActualColumnNames" value="true"/>-->
        <!--</table>-->
        <table tableName="sys_userrole" domainObjectName="SysUserRole" >
            <property name="useActualColumnNames" value="true"/>
        </table>

    </context>
</generatorConfiguration>